openapi: 3.0.3
info:
    title: Shop
    version: 1.0.0
components:
  securitySchemes:
      api_key:
        type: "apiKey"
        name: "api_key"
        in: "header"
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        password:
          type: string
    Item:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        price:
          type: integer
          format: int64
        image_link:
          type: string
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        cart:
          #type: object
          additionalProperties:
            type: object
            properties:
              #item_id:
                #type: integer
                #format: int64
              item:
                $ref: "#/components/schemas/Item"   # Это избыточная информация?
              qty:
                type: integer
                format: int64
        customer_id:
          type: integer
          format: int64
paths:
  /user/login:
    post:
      tags:
      - User
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    post:
      tags:
      - User
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        200:
          description: successful logout
          content: {}
  /items:
    get:
      tags:
      - Item
      summary: Lists Items with filters
      operationId: ListItems
      parameters:
      - name: price_min
        in: query
        description: Lower price limit
        required: false
        schema:
          type: integer
          format: int64
      - name: price_max
        in: query
        description: Upper price limit
        required: false
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        400:
          description: Invalid price range
          content: {}
    post:
      tags:
      - Item
      summary: "Add a new item to the store"
      operationId: "CreateItem"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Item"
      responses:
        "405":
          description: "Invalid input"
      security:
      - api_key: []
  /items/upload_image:
    post:
      tags:
      - Item
      summary: "uploads an image"
      operationId: "uploadFile"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                additionalMetadata:
                  description: "Additional data to pass to server"
                  type: string
                fileName:
                  description: "file to upload"
                  type: string
                  format: binary
      responses:
        201:
          description: "file uploaded"
      security:
      - api_key: []
  /items/{itemId}:
    get:
      tags:
      - Item
      summary: Find item by ID
      operationId: GetItem
      parameters:
      - name: itemId
        in: path
        description: ID of item to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        400:
          description: Invalid ID supplied
          content: {}
    put:
      tags:
      - Item
      summary: Updates a item in the store with form data
      operationId: UpdateItem
      parameters:
      - name: itemId
        in: path
        description: ID of item that needs to be updated
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  description: Updated name of the item
                status:
                  type: string
                  description: Updated status of the item
      responses:
        405:
          description: Invalid input
          content: {}
      security:
      - api_key: []
    delete:
      tags:
      - Item
      summary: Deletes a item
      operationId: DeleteItem
      parameters:
      - name: itemId
        in: path
        description: Item id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Item not found
          content: {}
      security:
      - api_key: []
      
  /orders:
    get:
      tags:
      - Order    
      summary: "Lists Orders by Customer ID"
      operationId: "ListOrdersByUser"
      parameters:
      - name: user_id
        in: query
        description: "Customer's User ID"
        required: false
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        400:
          description: "Invalid user id"
          content: {}
      security:
      - api_key: []
    post:
      tags:
      - Order    
      summary: "Add a new order to the store"
      operationId: "CreateOrder"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        "405":
          description: "Invalid input"
      security:
      - api_key: []
  /orders/{orderId}:
    get:
      tags:
      - Order
      summary: "Find order by ID"
      operationId: "GetOrder"
      parameters:
      - name: "orderId"
        in: path
        description: "ID of order to return"
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: "Invalid ID supplied"
          content: {}
      security:
      - api_key: []
    put:
      tags:
      - Order    
      summary: "Updates an order in the store with form data"
      operationId: "UpdateOrder"
      parameters:
      - name: "orderId"
        in: path
        description: "ID of order that needs to be updated"
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        204:
          description: "Updated sucessfully"
          content: {}
        405:
          description: Invalid input
          content: {}
      security:
      - api_key: []
    patch:
      tags:
      - Order
      summary: "Patches an order in the store with form data"
      operationId: "PatchOrder"
      parameters:
      - name: "orderId"
        in: path
        description: "ID of order that needs to be updated"
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: "Update Order with properties to be changed"
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Order'
                - type: object
                  properties:
                    Segment:
                      nullable: true
      responses:
        204:
          description: "Updated sucessfully"
      security:
      - api_key: []
    delete:
      tags:
      - Order    
      summary: "Deletes an order"
      operationId: "DeleteOrder"
      parameters:
      - name: "orderId"
        in: path
        description: "Order ID to delete"
        required: true
        schema:
          type: integer
          format: int64
      responses:
        204:
          description: "Deleted sucessfully"
          content: {}
        400:
          description: "Invalid ID supplied"
          content: {}
        404:
          description: "Item not found"
          content: {}
      security:
      - api_key: []